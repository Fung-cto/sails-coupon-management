<!DOCTYPE html>
<html>

<head>

  <!-- Viewport mobile tag for sensible mobile support -->
  <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

  <%/* If you want to discourage search engines from indexing this site, uncomment the following line: */%>
  <%/* <meta name="robots" content="noindex"> */%>

  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Q-Pon</title>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bulma@0.9.0/css/bulma.min.css">
  <link rel="stylesheet" href="https://pro.fontawesome.com/releases/v5.10.0/css/all.css"
    integrity="sha384-AYmEC3Yw5cVb3ZcuHtOA93w35dYTsvhLPVnYs9eStHfGJvOvKxVfELGroGkvsg+p" crossorigin="anonymous" />
  <link href="~bulma-calendar/dist/css/bulma-calendar.min.css" rel="stylesheet">


  <!--
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
        of Sails' conventional asset pipeline (boilerplate Gruntfile).

        By default, stylesheets from your `assets/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.

        To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->

  <!--STYLES-->
  <link rel="stylesheet" href="/styles/importer.css">
  <!--STYLES END-->
</head>

<body>
  <!-- START NAV -->
  <nav class="navbar">
    <div class="navbar-brand">
      <a class="navbar-item" href="/">
        <img
          src="https://lh3.googleusercontent.com/pw/ACtC-3fcWUuBk6t8p2w3fioyTyvU2yk9jNwu0WFpSJnPioUxjRp4Syf2FYhkfgbsho4zGiP5NyMyZnqx_veob4ppjaizmWDUbnkWjo-aVf_8fO9IDhRgLP06x9h_AwqNNpxVm5MJk6j6tzlYma2oJ_ZSazs=s200-no"
          alt="Logo">
      </a>
      <a role="button" class="navbar-burger" data-target="navMenu" aria-label="menu" aria-expanded="false">
        <span aria-hidden="true"></span>
        <span aria-hidden="true"></span>
        <span aria-hidden="true"></span>
      </a>
    </div>

    <div id="navMenu" class="navbar-menu">

      <div class="navbar-start">
        <a href="/" class="navbar-item is-active">
          Home
        </a>
        <a href="/coupon/search" class="navbar-item">
          Search
        </a>
        <% if (req.session.role == 'admin') { %>
        <a href="/coupon/create" class="navbar-item">
          Create
        </a>
        <a href="/coupon/list" class="navbar-item">
          Admin
        </a>
        <% } else if (req.session.role == 'member'){ %>
        <a onclick="redeemedCoupons('<%= req.session.userId %>')" class="navbar-item">
          My Redeemed Coupons
        </a>
        <% } %>
      </div>

      <div class="navbar-end">
        <div class="navbar-item">
          <div class="buttons">
            <% if (req.session.role == 'admin' || req.session.role == 'member') { %>
            <div class="navbar-item">Hi <%= req.session.username%>!</div>
            <button type="button" class="button" onclick="logout()">Logout</button>
            <% } else { %>
            <a class="button is-primary">Sign Up</button>
            </a>
            <a href="/user/login" class="button is-light">Login</button>
            </a>
            <% } %>
          </div>
        </div>
      </div>
    </div>

  </nav>
  <!-- END NAV -->
  <section class="section">
    <div class="container">
      <h1 class="title">Q-Pon</h1>
      <h2 class="subtitle">Redeem your coins for dining coupons.</h2>
      <%- body %>

    </div>
  </section>



  <!--
        Client-side Templates
        ========================

        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like React, Vue.js, Angular, Ember, and Backbone
        require that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).

        To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different view engine (handlebars, dust, pug/jade, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
    -->

  <!--TEMPLATES-->
  <!--TEMPLATES END-->


  <!--
        Server-side View Locals
        ========================

        Sometimes, it's convenient to get access to your server-side view locals from
        client-side JavaScript.  This can improve page load times, remove the need for
        extra AJAX requests, and make your client-side code easier to understand and
        to maintain.  Sails provides a simple mechanism for accessing dynamic view
        locals: the "exposeLocalsToBrowser()" view partial.

        For more information on using this built-in feature, see:
        https://sailsjs.com/docs/concepts/views/locals#?escaping-untrusted-data-using-exposelocalstobrowser

    -->


  <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.

      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:

          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->

  <!--SCRIPTS-->
  <script src="/dependencies/sails.io.js"></script>
  <!--SCRIPTS END-->
  <script>
    async function redeemedCoupons(id) {

      var response = await fetch("/user/" + id + "/owners", {
        method: "GET"
      });

      if (response.ok) {
        //var html = await response.text();
        //alert(html);

        //alert("Coupon redeemed.")
        location.assign("/user/" + id + "/owners");
      } else {
        alert(response.status + ": " + response.statusText);
      }


    };
  </script>
  <script>
    async function logout() {
      var r = confirm("Confirm Logout?");

      if (r) {
        var response = await fetch("/user/logout", {
          method: "POST"
        });

        if (response.ok) {
          //var html = await response.text();
          //alert(html);

          //alert("Coupon redeemed.")
          location.assign("/");
        } else {
          alert(response.status + ": " + response.statusText);
        }

      } else {
        alert("cancelled");
      }
    };
  </script>
  <script>
    document.addEventListener('DOMContentLoaded', () => {

      // Get all "navbar-burger" elements
      const $navbarBurgers = Array.prototype.slice.call(document.querySelectorAll('.navbar-burger'), 0);

      // Check if there are any navbar burgers
      if ($navbarBurgers.length > 0) {

        // Add a click event on each of them
        $navbarBurgers.forEach(el => {
          el.addEventListener('click', () => {

            // Get the target from the "data-target" attribute
            const target = el.dataset.target;
            const $target = document.getElementById(target);

            // Toggle the "is-active" class on both the "navbar-burger" and the "navbar-menu"
            el.classList.toggle('is-active');
            $target.classList.toggle('is-active');

          });
        });
      }

    });
  </script>
  <script>
    // Initialize all input of type date
    var calendars = bulmaCalendar.attach('[type="date"]', options);

    // Loop on each calendar initialized
    for (var i = 0; i < calendars.length; i++) {
      // Add listener to date:selected event
      calendars[i].on('select', date => {
        console.log(date);
      });
    }

    // To access to bulmaCalendar instance of an element
    var element = document.querySelector('#my-element');
    if (element) {
      // bulmaCalendar instance is available as element.bulmaCalendar
      element.bulmaCalendar.on('select', function (datepicker) {
        console.log(datepicker.data.value());
      });
    }
  </script>
  <script src="~bulma-calendar/dist/js/bulma-calendar.min.js"></script>
</body>

</html>